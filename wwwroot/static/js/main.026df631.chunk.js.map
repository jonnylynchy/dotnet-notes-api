{"version":3,"sources":["components/Note.js","App.js","serviceWorker.js","index.js"],"names":["Note","state","editMode","noteText","_this","props","note","editNote","e","console","log","setState","_","updateNote","id","deleteNote","noteChange","target","value","completeNote","cardText","this","react_default","a","createElement","reactstrap_es","onChange","editLinkClass","className","onClick","concat","PureComponent","rootUrl","App","notes","newNote","updated","fetchNotes","fetch","then","res","json","_callee","noteId","text","updatedNotes","noteUrl","data","rawResponse","regenerator_default","wrap","_context","prev","next","map","x","noteID","Object","objectSpread","NoteText","method","headers","Accept","Content-Type","body","JSON","stringify","sent","ok","statusText","stop","insertNote","_callee2","_context2","error","_callee3","_context3","filter","_this2","noteList","components_Note","key","color","placeholder","addonType","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.026df631.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Card, CardText, CardBody, Input } from 'reactstrap';\n\nclass Note extends PureComponent {\n    state = {\n        editMode: false,\n        noteText: this.props.note.noteText\n    }\n    \n    editNote = (e) => {\n        console.log('edit note', this.state.noteText);\n        this.setState({\n            editMode: !this.state.editMode\n        },  _ => {\n            if(!this.state.editMode) {\n                this.props.updateNote(this.props.id, this.state.noteText);\n            }\n        });\n    }\n\n    deleteNote = (e) => {\n        this.props.deleteNote(this.props.id);\n    }\n\n    noteChange = (e) => {\n        this.setState({\n            noteText: e.target.value\n        });\n    }\n\n    completeNote = (e) => {\n        console.log('complete note');\n    }\n\n    render() {\n        const cardText = this.state.editMode\n            ? <Input value={this.state.noteText} onChange={this.noteChange} />\n            : <CardText>{this.props.note.noteText}</CardText>;\n\n        const editLinkClass = this.state.editMode\n        ? 'fa-check-square'\n        : 'fa-edit';\n\n        return (\n            <Card className=\"note\">\n                <CardBody>\n                    <i className=\"far fa-window-close fa-lg\" onClick={this.deleteNote}></i>\n                    <i className={`fas ${editLinkClass} fa-lg`} onClick={this.editNote}></i>\n                    <div className=\"note-text\">{cardText}</div>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nexport default Note;","import React, { Component } from 'react';\nimport { Alert, Button, InputGroup, Input, InputGroupAddon } from 'reactstrap';\n\nimport Note from './components/Note';\n\nimport './App.css';\n\nconst rootPath = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : '';\nconst rootUrl = `${rootPath}/api/notes/`\n\nclass App extends Component {\n\tstate = {\n\t\tnotes: [],\n\t\tnewNote: '',\n\t\tupdated: false\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.fetchNotes();\n\t}\n\n\tfetchNotes = _ => {\n\t\tfetch(rootUrl)\n      \t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tconsole.log(json);\n\t\t\t\tthis.setState({ notes: json });\n\t\t\t});\n\t}\n\n\tnoteChange = (e) => {\n\t\tconst note = e.target.value;\n\t\tthis.setState({\n\t\t\tnewNote: note\n\t\t});\n\t}\n\n\tupdateNote = async (noteId, text) => {\n\t\t// update UI (expecting that update on server worked)\n\t\tconst updatedNotes = this.state.notes.map((x) => {\n\t\t\tif(x.noteID === noteId) {\n\t\t\t\tconst newNote = {...x, noteText: text}\n\t\t\t\treturn newNote;\n\t\t\t}\n\t\t\treturn x;\n\t\t});\n\n\t\tthis.setState({\n\t\t\tnotes: updatedNotes\n\t\t});\n\n\t\t// send update to server\n\t\tconst noteUrl = rootUrl + noteId;\n\t\tconsole.log(noteUrl);\n\t\tconst data = {\n\t\t\tNoteText: text\n\t\t};\n\t\tconst rawResponse = await fetch(noteUrl, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(data)\n\t\t});\n\n\t\tif(rawResponse.ok) {\n\t\t\tconsole.log('note updated');\n\t\t} else {\n\t\t\tconsole.log('Error', rawResponse.statusText);\n\t\t}\n\t}\n\n\tinsertNote = async _ => {\n\t\tconst data = {\n\t\t\tNoteText: this.state.newNote\n\t\t};\n\t\tconst rawResponse = await fetch(rootUrl, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(data)\n\t\t});\n\t\tif(rawResponse.ok) {\n\t\t\tconsole.log('note inserted');\n\t\t\tthis.setState({\n\t\t\t\tupdated: true\n\t\t\t});\n\t\t\tthis.fetchNotes();\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\terror: rawResponse.statusText\n\t\t\t});\n\t\t}\n\t}\n\n\tdeleteNote = async (noteId) => {\n\t\t// update UI (expecting that update on server worked)\n\t\tconst updatedNotes = this.state.notes.filter((x) => x.noteID !== noteId);\n\n\t\tthis.setState({\n\t\t\tnotes: updatedNotes\n\t\t});\n\n\t\t// send update to server\n\t\tconst noteUrl = rootUrl + noteId;\n\t\tconst rawResponse = await fetch(noteUrl, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n\n\t\tif(rawResponse.ok) {\n\t\t\tconsole.log('note deleted');\n\t\t} else {\n\t\t\tconsole.log('Error', rawResponse.statusText);\n\t\t}\n\t}\n\n\trender() {\n\n\t\tconst noteList = this.state.notes.map((note) => <Note id={note.noteID} key={note.noteID} note={note} updateNote={this.updateNote} deleteNote={this.deleteNote}/>);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<header>\n\t\t\t\t\t\tScratch\n\t\t\t\t\t</header>\n\t\t\t\t\t{this.state.updated\n\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t<Alert color=\"success\">\n\t\t\t\t\t\t\t\tNote Added\n\t\t\t\t\t\t  \t</Alert>\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t\t{this.state.error \n\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t<Alert color=\"danger\">\n\t\t\t\t\t\t\t\t{this.state.error}\n\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t\t<p></p>\n\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t<Input \n\t\t\t\t\t\t\tonChange={this.noteChange}\n\t\t\t\t\t\t\tvalue={this.state.newNote}\n\t\t\t\t\t\t\tplaceholder=\"Enter a new note and click 'Save'\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<InputGroupAddon addonType=\"append\">\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tonClick={this.insertNote} \n\t\t\t\t\t\t\t\tcolor=\"primary\">\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</InputGroupAddon>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t\t<p></p>\n\t\t\t\t\t<h3 className=\"text-center\">Notes</h3>\n\t\t\t\t\t<div className=\"note-list text-center\">\n\t\t\t\t\t\t{noteList.length ? noteList : <div>No notes</div>}\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}